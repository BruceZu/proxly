
.ui-match {
    background: #00BC8C;
}
html {
    width:100%;
    height:100%;
    overflow:hidden;
}
input.project-name {
    font-size: 1.5em !important;
    padding-top:0 !important;
    padding-bottom:0 !important;
    font-weight:bold;
}
span.label.label-default {
    background-color:#545454 !important;
}
body {
    padding-top:50px;
    padding-bottom:50px;
    height:100%;
    background-color: #f2f2f2;
    /*font-size: 1.3em;*/

    overflow:scroll;
}
.main-content {
    overflow-y:scroll;

}
.dl-horizontal p {
    margin:0;
    -webkit-user-select: initial;
}
.dl-horizontal {
    margin-top:0;
    margin-bottom:0;
}
.dl-horizontal dd {
    margin-left: 55px;
    /*padding-left:5px;*/
}
.dl-horizontal dt {
    width:50px;
    text-align: right;
}
.iconic-cogs {
    fill:orange;
    stroke:orange;
}
.file-icon > .iconic {
    margin-top:18px;
}

.resource-list, .file-icon {
    padding-left:0px;
    margin-bottom:10px;
}
.resource-list dt {
    color:#00BC8C;

}
.server-on {
    color:#00bc8c;
}
.server-off {
    color:#e74c3c;
}
.resource-footer {
  position: relative;
  overflow-y:scroll;
  bottom: 0;
  color:#FFF;
  width: 100%;
  /* Set the fixed height of the footer here */
  height:25%;
  background-color: #2D2D2D;
}
.proxly-input {
    background-color: transparent;
    border: none !important;
    border-color: transparent !important;
    outline: none !important;

    /*color: #FFF !important;*/
}
.proxly-image {
  position:absolute;top:0px;left:0px;z-index:9000000;
  width:28px;
  height:28px;
}
.proxly-folder > span.glyphicon {
  font-size: 24px;
  vertical-align: middle;
  margin-right: 10px;
}
.proxly-folder code {
  margin-top: auto;
  margin-bottom: auto;
  vertical-align: middle;

}
.proxly-name {
  margin-bottom:;
}
.proxly-name > .btn-group {
  margin-right:10px;
}
/*.proxly-name {
  color: #FFF;
  margin-left:20px;
}
.proxly-host {
  color:#FFF;
  text-align: center;
  vertical-align: middle;
}*/
.proxly-port {
  padding-left:0 !important;
  width:60px !important;
}
/* angular csp */
@charset "UTF-8";

[ng\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak],
.ng-cloak, .x-ng-cloak,
.ng-hide {
  display: none !important;
}

ng\:form {
  display: block;
}

.dropper {
  display:none;
  position:fixed;
  opacity:0.7;
  top:0;
  left:0;
  width:100%;
  height:100%;
  background-color:#000;
}
.dropper .glyphicon-folder-open {
  font-size:80px;
  color:#FFF;
  top: 50%;
  left: 50%;
  -webkit-transform: translate(-50%, -50%);  
}
.dropping .dropper {
  background-color:black;
  display:block !important;
  z-index: 999999;
}

.repeated-item.ng-enter, .repeated-item.ng-move {
  -webkit-transition:0.5s linear all;
  -moz-transition:0.5s linear all;
  -o-transition:0.5s linear all;
  transition:0.5s linear all;
  opacity:0;
}

/*
 The ng-enter-active and ng-move-active
 are where the transition destination properties
 are set so that the animation knows what to
 animate.
*/
.repeated-item.ng-enter.ng-enter-active,
.repeated-item.ng-move.ng-move-active {
  opacity:1;
}

/*
  We're using CSS keyframe animations for when
  the leave event is triggered for the element
  that has the .repeated-item class
*/
.repeated-item.ng-leave {
  -webkit-animation:0.5s my_animation;
  -moz-animation:0.5s my_animation;
  -o-animation:0.5s my_animation;
  animation:0.5s my_animation;
}

@keyframes my_animation {
  from { opacity:1; }
  to { opacity:0; }
}

/*
  Unfortunately each browser vendor requires
  its own definition of keyframe animation code...
*/
@-webkit-keyframes my_animation {
  from { opacity:1; }
  to { opacity:0; }
}

@-moz-keyframes my_animation {
  from { opacity:1; }
  to { opacity:0; }
}

@-o-keyframes my_animation {
  from { opacity:1; }
  to { opacity:0; }
}
