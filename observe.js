// Generated by CoffeeScript 1.8.0
var Observable, exports;

Observable = (function() {
  var Change, deliverChanges, observers, subject, _onchange;

  observers = void 0;

  subject = void 0;

  Observable.create = function(subject) {
    return (new this(subject)).subject;
  };

  function Observable(subject, parent, prefix) {
    if ("object" !== typeof subject) {
      throw new TypeError("object expected. got: " + typeof subject);
    }
    if (!(this instanceof Observable)) {
      return new Observable(subject, parent, prefix);
    }
    this._bind(subject, parent, prefix);
    return;
  }

  Observable.prototype._bind = function(subject, parent, prefix) {
    if (this.subject) {
      throw new Error("already bound!");
    }
    if (null === subject) {
      throw new TypeError("subject cannot be null");
    }
    this.subject = subject;
    if (parent) {
      parent.observers.push(this);
    } else {
      this.observers = [this];
    }
    this._onchange = _onchange(parent || this, prefix);
    Object.observe(this.subject, this._onchange);
    this._walk(parent || this, prefix);
  };

  deliverChanges = function() {
    return this.observers.forEach(function(o) {
      Object.deliverChangeRecords(o._onchange);
    });
  };

  Observable.prototype._walk = function(parent, prefix) {
    var object;
    object = this.subject;
    return Object.keys(object).forEach(function(name) {
      var path, value;
      value = object[name];
      if ("object" !== typeof value) {
        return;
      }
      if (null === value) {
        return;
      }
      path = (prefix ? prefix + "." + name : name);
      new Observable(value, parent, path);
    });
  };

  Observable.prototype.stop = function() {
    return this.observers.forEach(function(observer) {
      Object.unobserve(observer.subject, observer._onchange);
    });
  };

  Observable.prototype._remove = function(subject) {
    return this.observers = this.observers.filter(function(observer) {
      if (subject === observer.subject) {
        Object.unobserve(observer.subject, observer._onchange);
        return false;
      }
      return true;
    });
  };

  Observable.prototype.onchange = function(change) {};

  _onchange = function(parent, prefix) {
    return function(ary) {
      return ary.forEach(function(change) {
        var name, object, path, type, value;
        object = change.object;
        type = change.type;
        name = change.name;
        value = object[name];
        path = (prefix ? prefix + "^^" + name : name);
        if ("add" === type && null !== value && "object" === typeof value) {
          new Observable(value, parent, path);
        } else {
          if ("delete" === type && "object" === typeof change.oldValue) {
            parent._remove(change.oldValue);
          }
        }
        change = new this.Change(path, change);
        parent.onchange(type, change);
        parent.onchange(type + ' ' + path, change);
        parent.onchange('change', change);
      });
    };
  };

  Change = function(path, change) {
    this.path = path;
    this.name = change.name;
    this.type = change.type;
    this.object = change.object;
    this.value = change.object[change.name];
    this.oldValue = change.oldValue;
    return this;
  };

  return Observable;

})();

module.exports = exports = Observable;
