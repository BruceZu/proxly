// Generated by CoffeeScript 1.8.0
var ProxlyCtrl,
  __slice = [].slice,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

this.BaseCtrl = (function() {
  BaseCtrl.register = function(app, name) {
    var _ref;
    if (name == null) {
      name = this.name || ((_ref = this.toString().match(/function\s*(.*?)\(/)) != null ? _ref[1] : void 0);
    }
    return app.controller(name, this);
  };

  BaseCtrl.inject = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.$inject = args;
  };

  function BaseCtrl() {
    var args, fn, index, key, _i, _len, _ref, _ref1;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _ref = this.constructor.$inject;
    for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
      key = _ref[index];
      this[key] = args[index];
    }
    _ref1 = this.constructor.prototype;
    for (key in _ref1) {
      fn = _ref1[key];
      if (typeof fn !== 'function') {
        continue;
      }
      if ((key === 'constructor' || key === 'initialize') || key[0] === '_') {
        continue;
      }
      this.$scope[key] = (typeof fn.bind === "function" ? fn.bind(this) : void 0) || _.bind(fn, this);
    }
    if (typeof this.initialize === "function") {
      this.initialize();
    }
  }

  return BaseCtrl;

})();

ProxlyCtrl = (function(_super) {
  __extends(ProxlyCtrl, _super);

  function ProxlyCtrl() {
    this.onDrop = __bind(this.onDrop, this);
    return ProxlyCtrl.__super__.constructor.apply(this, arguments);
  }

  ProxlyCtrl.inject("$scope", "$filter", "$sce", "$document", "$window", "dndFile", "proxlyApp");

  ProxlyCtrl.prototype.initialize = function() {
    var _base;
    this.app = this.proxlyApp;
    this.data = this.app.Storage.data;
    this.$scope.server = this.app.Storage.session.server;
    this.$scope.maps = this.data.maps;
    this.$scope.directories = this.data.directories;
    this.$scope.save = this.save;
    this.$scope.resourceMap = this.resourceMap = [];
    this.$scope.currentResources = this.app.data.currentResources;
    if ((_base = this.$scope).currentResources == null) {
      _base.currentResources = [];
    }
    this.$scope.urlFilter = this.urlFilter = 'resource';
    this.$scope.foundFiles = {};
    this.$scope.dirDisplay = {};
    this.$scope.currentFilter = {};
    this.$scope.urls = {};
    this.$scope.serverCheckbox = this.$scope.server.status.isOn;
    this.$scope.$watch('server.status', (function(_this) {
      return function(newValue, oldValue) {
        _this.$scope.serverCheckbox = newValue.isOn;
        return _this.app.Storage.session.server.status.port = newValue.port;
      };
    })(this), true);
    this.$scope.currentFileMatches = this.data.currentFileMatches;
    this.$scope.$watch('currentFilter', (function(_this) {
      return function(newValue, oldValue) {
        return _this.$scope.setLocalPath(newValue);
      };
    })(this));
    if (this.dndFile != null) {
      this.dnd = new this.dndFile('html', this.onDrop);
    }
    this.$scope.presets = [
      {
        presetName: 'Salesforce',
        url: 'https.*\/resource(\/[0-9]+)?\/([A-Za-z0-9\-._]+\/)?',
        regexRepl: ''
      }
    ];
    this.$scope.navIsRedirect = false;
    return this.$scope.showResources = false;
  };

  ProxlyCtrl.prototype.onDrop = function(event) {
    var entry, _ref;
    entry = (_ref = event.items[0]) != null ? typeof _ref.webkitGetAsEntry === "function" ? _ref.webkitGetAsEntry() : void 0 : void 0;
    if (!(entry != null ? entry.isDirectory : void 0)) {
      return;
    }
    return this.app.FS.openDirectory(entry, (function(_this) {
      return function(err, pathName, dir) {
        var _ref1;
        dir.name = (_ref1 = pathName.match(/[^\/]+$/)) != null ? _ref1[0] : void 0;
        delete dir.entry;
        dir.pathName = pathName;
        dir.isOn = true;
        _this.data.directories.push(dir);
        return _this.$scope.$apply();
      };
    })(this));
  };

  ProxlyCtrl.prototype.refreshCurrentResources = function() {
    return this.app.getResources((function(_this) {
      return function(err, currentResources) {
        show('got res');
        show(currentResources);
        _this.$scope.currentResources = currentResources;
        return _this.$scope.$apply();
      };
    })(this));
  };

  ProxlyCtrl.prototype.newDirectory = function() {
    return this.openDirectory((function(_this) {
      return function(err, pathName, dir) {
        return _this.$scope.$apply();
      };
    })(this));
  };

  ProxlyCtrl.prototype.newMapping = function(item) {
    var newItem;
    newItem = item != null ? angular.copy(item) : {};
    newItem.isRedirect = true;
    newItem.isOn = false;
    newItem.type = 'Web Server';
    newItem.url = newItem.regexRepl = '';
    this.data.maps.push(newItem);
    return newItem.name = 'Redirect ' + this.data.maps.length;
  };

  ProxlyCtrl.prototype.deleteDirectory = function(item) {
    var idx;
    idx = this.data.directories.indexOf(item);
    if (idx >= 0) {
      return this.data.directories.splice(idx, 1);
    }
  };

  ProxlyCtrl.prototype.deleteMapping = function(item) {
    var idx;
    idx = this.data.maps.indexOf(item);
    if (idx >= 0) {
      this.data.maps.splice(idx, 1);
    }
    return this.currentFilter = {};
  };

  ProxlyCtrl.prototype.setLocalPath = function(item) {
    var dir, e, reg, resource, _dirs, _i, _j, _len, _len1, _ref, _ref1, _results;
    try {
      reg = new RegExp(item.url);
      item.regexIsWrong = false;
    } catch (_error) {
      e = _error;
      item.regexIsWrong = true;
      this.$scope.$apply();
      return;
    }
    if (this.$scope.filteredResources != null) {
      _ref = this.$scope.filteredResources;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        resource = _ref[_i];
        resource.localPath = resource.url.replace(reg, item.regexRepl);
        _dirs = [];
        _ref1 = this.$scope.directories;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          dir = _ref1[_j];
          if (dir.isOn) {
            _dirs.push(dir);
          }
        }
        _results.push(this.app.getFileMatch(resource.localPath, (function(_this) {
          return function(err, fileMatch, directory) {
            var res, _k, _l, _len2, _len3, _ref2, _ref3;
            if (err != null) {
              _ref2 = _this.$scope.filteredResources;
              for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
                res = _ref2[_k];
                if (res === resource) {
                  res.localFile = '';
                }
              }
            } else {
              _ref3 = _this.$scope.filteredResources;
              for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
                res = _ref3[_l];
                if (res.localPath === fileMatch.filePath) {
                  res.localFile = directory.pathName + '/' + res.localPath;
                }
              }
            }
            return _this.$scope.$apply();
          };
        })(this)));
      }
      return _results;
    }
  };

  ProxlyCtrl.prototype.openDirectory = function(cb) {
    return chrome.fileSystem.chooseEntry({
      type: 'openDirectory'
    }, (function(_this) {
      return function(directoryEntry, files) {
        return _this.app.FS.openDirectory(directoryEntry, function(err, pathName, dir) {
          var _ref;
          dir.name = (_ref = pathName.match(/[^\/]+$/)) != null ? _ref[0] : void 0;
          dir.pathName = pathName;
          dir.isOn = true;
          delete dir.entry;
          _this.data.directories.push(dir);
          return typeof cb === "function" ? cb(pathName, dir) : void 0;
        });
      };
    })(this));
  };

  ProxlyCtrl.prototype.setCurrentFilter = function(item) {
    return this.$scope.currentFilter = angular.copy(item);
  };

  ProxlyCtrl.prototype.getHtmlSafe = function(text) {
    return this.sce.trustAsHtml(text);
  };

  ProxlyCtrl.prototype.toggleServer = function() {
    if (this.app.Storage.session.server.status.isOn) {
      return this.app.stopServer((function(_this) {
        return function() {
          return console.log('stop');
        };
      })(this));
    } else {
      return this.app.startServer((function(_this) {
        return function() {
          return console.log('start');
        };
      })(this));
    }
  };

  ProxlyCtrl.prototype.getClass = function(type, item) {
    if (type === 'on') {
      if (item.isOn) {
        return 'btn-success';
      } else {
        return 'btn-default';
      }
    } else {
      if (item.isOn) {
        return 'btn-default';
      } else {
        return 'btn-danger';
      }
    }
  };

  ProxlyCtrl.prototype.newItem = function() {
    if (this.$scope.navIsRedirect) {
      return this.newMapping();
    } else {
      return this.newDirectory();
    }
  };

  ProxlyCtrl.prototype.toggleItem = function(item) {
    if (item.isOn == null) {
      item.isOn = true;
    }
    return item.isOn = !item.isOn;
  };

  ProxlyCtrl.prototype.getFullDirList = function(directories) {
    var d, key, _results;
    _results = [];
    for (key in directories) {
      if (!__hasProp.call(directories, key)) continue;
      d = directories[key];
      _results.push(this.getOneDirList(d));
    }
    return _results;
  };

  ProxlyCtrl.prototype.getDirList = function(d) {
    return this.lsR(d.entry, function(results) {
      return d.list = results;
    }, function(error, results) {
      return show(error, results);
    });
  };

  ProxlyCtrl.prototype.getOneDirList = function(d) {
    if (d.entry != null) {
      return this.getDirList(d);
    } else {
      return this.app.FS.restoreEntry(d.directoryEntryId, function(entry) {
        d.entry = entry;
        return this.getDirList(d);
      });
    }
  };

  ProxlyCtrl.prototype.findMatches = function() {
    var item, promises, _i, _len, _ref, _results;
    if (this.$scope.directoryEntry != null) {
      promises = [];
      _ref = this.$filter('filter')(this.$scope.resourceMap, {
        'url': this.$scope.urlFilter
      }, false);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        _results.push((function(_this) {
          return function(item) {
            return _this.$findFile(_this.$scope.directoryEntry, item.url, -1).then(function(something) {
              return show('something');
            });
          };
        })(this)(item));
      }
      return _results;
    } else {
      return this.app.openDirectory();
    }
  };

  ProxlyCtrl.prototype.trustAsResourcUrl = function(url) {
    return $sce.trustAsResourceUrl(url);
  };

  return ProxlyCtrl;

})(this.BaseCtrl);

module.exports = ProxlyCtrl;
